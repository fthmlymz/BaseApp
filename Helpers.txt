------------------------------------ Application Ports ------------------------------------
Keycloak                     : http://localhost:4000;
InventoryManagement.API      : http://localhost:4001;
InventoryManagement.Frontend : https://localhost:4002;
EmailService.API             : http://localhost:4004;
------------------------------------ Application Ports ------------------------------------



------------------------------------ Docker container backup/restore ------------------------------------
Powershell : docker login
Backup     : docker cp 0776f15b9409:/var/opt/mssql/data/KeycloakDb_log.ldf C:\Database
Restore    : docker cp "C:/Users/malfx001/Desktop/Yeni Disk/Programlama/Workshop/Enerya/Database/Keycloak/KeycloakDb.mdf" 6b01fe1fee98:/var/opt/mssql/data/
------------------------------------ Docker container backup/restore ------------------------------------



------------------------------------ minikube/Kubernetes Ayarlari ------------------------------------
1-) Choco kullanilarak minikube kur:
    https://community.chocolatey.org/packages/Minikube
	https://dev.to/sanjaybsm/installing-minikube-kubectl-with-chocolatey-windows-5gc7
2-) Hyper-V set
    https://minikube.sigs.k8s.io/docs/drivers/hyperv/
    Set Hyper-V: minikube config set driver hyperv
3-) Hyper-V uzerinde bir tane external01 olustur ve asagidaki komut ile calistir.
    minikube start --vm-driver hyperv --hyperv-virtual-switch "External01"
------------------------------------ minikube/Kubernetes Ayarlari ------------------------------------



------------------------------------ docker-compose.yml to kubernetes ------------------------------------
Docker Compose Dosyalarını Kubernetes YAML Dosyalarına donustur:
- kompose convert -f docker-compose.yml -o kubernetes/

Bu komut, docker-compose.yml dosyasını kubernetes/ dizinine donusturulecektir.

Docker Imajlarını Kubernetes Cluster'a Yukle:
- kubectl apply -f kubernetes/
- minikube tunnel 
------------------------------------ docker-compose.yml to kubernetes ------------------------------------






------------------------------------ Migrations - Persistence Layer ------------------------------------
Migrate: dotnet ef migrations add InitialCreate5 --context ApplicationDbContext
Update : dotnet ef database update --context ApplicationDbContext
Remove : dotnet ef migrations remove --force --context ApplicationDbContext
------------------------------------ Migrations - Persistence Layer ------------------------------------



------------------------------------ Dockerfile - Test Run ------------------------------------
InventoryManagement.Frontend
Command: docker build -t inventory.management-frontend .
Command: docker run -d -p 4004:4004 inventory.management.frontend
Command: docker-compose up --build
------------------------------------ Dockerfile - Test Run ------------------------------------




























using Application.Interfaces.Repositories;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using MongoDB.Driver;
using Persistence.Collections;
using Persistence.Context;
using Persistence.HostedService;
using Persistence.Repositories;
using Serilog;
using Serilog.Events;
using System.Text.Encodings.Web;
using System.Text.Unicode;

namespace Persistence.Extensions
{
    public static class IServiceCollectionExtensions
    {

        public static IServiceCollection AddPersistenceLayer(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddRepositories();
            AddDbContexts(services, configuration);

            return services;
        }


        private static void AddDbContexts(IServiceCollection services, IConfiguration configuration)
        {
            #region Application Collections&Configuration
            /*services.AddMongoDbInitializer<AppDbCollections>(
                configuration.GetConnectionString("ApplicationDbConnection"),
                "Deneme"//new MongoUrl(configuration.GetConnectionString("ApplicationDbConnection")).DatabaseName
            );*/
            services.AddMongoDbInitializer("mongodb+srv://fat:0FTGjynK4@cluster0.t9xclpe.mongodb.net/AppDb?retryWrites=true&w=majority&appName=Cluster0", "myDatabase", new List<string> { "collection1", "collection2" });

            #endregion


            //#region EventBus - DotnetCore Cap MongoDB
            //services.AddCap(x =>
            //{
            //    x.UseMongoDB(opt =>
            //    {
            //        var mongoUrl = new MongoDB.Driver.MongoUrl(configuration.GetConnectionString("DotnetCoreCapConnection"));
            //        opt.DatabaseConnection = configuration.GetConnectionString("DotnetCoreCapConnection");
            //        opt.DatabaseName = mongoUrl.DatabaseName;
            //        /*opt.DatabaseConnection = configuration.GetConnectionString("DotnetCoreCapConnection");
            //        //opt.DatabaseName = configuration["Databases:DotnetCoreCapDbName"];*/
            //    });
            //    x.UseRabbitMQ(options =>
            //    {
            //        options.ExchangeName = "BaseStations";
            //        options.BasicQosOptions = new DotNetCore.CAP.RabbitMQOptions.BasicQos(3);
            //        options.ConnectionFactoryOptions = opt =>
            //        {
            //            opt.HostName = configuration.GetSection("RabbitMQ:Host").Value;
            //            opt.UserName = configuration.GetSection("RabbitMQ:Username").Value;
            //            opt.Password = configuration.GetSection("RabbitMQ:Password").Value;
            //            opt.Port = Convert.ToInt32(configuration.GetSection("RabbitMQ:Port").Value);
            //            opt.CreateConnection();
            //        };
            //    });
            //    x.UseDashboard(opt => opt.PathMatch = "/cap-dashboard");
            //    x.FailedRetryCount = 5;
            //    x.UseDispatchingPerGroup = true;
            //    x.FailedThresholdCallback = failed =>
            //    {
            //        //var logger = failed.ServiceProvider.GetRequiredService<ILogger<Program>>();
            //        //logger.LogError($@"A message of type {failed.MessageType} failed after executing {x.FailedRetryCount} several times, 
            //        //    requiring manual troubleshooting. Message name: {failed.Message.GetName()}");
            //    };
            //    x.JsonSerializerOptions.Encoder = JavaScriptEncoder.Create(UnicodeRanges.All);
            //});
            //#endregion


            //#region Serilog MongoDb Settings
            //var logger = CreateLogger(configuration);
            //services.AddLogging(x => x.AddSerilog(logger));
            //#endregion
        }



        private static void AddRepositories(this IServiceCollection services)
        {
            services
                .AddScoped(typeof(IUnitOfWork), typeof(UnitOfWork))
                .AddScoped(typeof(IGenericRepository<>), typeof(GenericRepository<>));

            services.AddScoped<ApplicationDbContext>();
        }

        /*public static IServiceCollection AddMongoDbInitializer<T>(this IServiceCollection services, string connectionString, string databaseName) where T : class
        {
            services.AddHostedService(provider =>
            {
                var mongoUrl = new MongoUrl(connectionString);
                var mongoClient = new MongoClient(mongoUrl);
                var database = mongoClient.GetDatabase(databaseName);
                var collection = database.GetCollection<T>(typeof(T).Name);

                return new MongoDbInitializer<T>(mongoUrl, collection);
            });
            return services;
        }*/
        public static IServiceCollection AddMongoDbInitializer(this IServiceCollection services, string connectionString, string databaseName, List<string> collections)
        {
            services.AddHostedService(provider =>
            {
                return new MongoDbInitializer(connectionString, databaseName, collections);
            });

            return services;
        }


        private static Serilog.ILogger CreateLogger(IConfiguration configuration)
        {
            var serilogSeqUrl = configuration.GetSection("SerilogSeqUrl").Value;
            var seriLogConnection = configuration.GetConnectionString("SeriLogConnection");
            var minimumLevel = configuration.GetValue<LogEventLevel>("Serilog:MinimumLevel:Default");
            /*var serverUrl = serilogSeqUrl ?? seriLogConnection;
            if (string.IsNullOrEmpty(serverUrl))
            {
                Log.Logger.Error("Both SerilogSeqUrl and SeriLogConnection are null or empty.");
                //throw new ArgumentNullException("Both SerilogSeqUrl and SeriLogConnection are null or empty.");
            }*/
            var loggerConfiguration = new LoggerConfiguration().MinimumLevel.Is(minimumLevel);

            loggerConfiguration = serilogSeqUrl switch
            {
                { } => loggerConfiguration.WriteTo.Seq(serilogSeqUrl, minimumLevel),
                _ => loggerConfiguration
            };
            loggerConfiguration = seriLogConnection switch
            {
                { } => loggerConfiguration.WriteTo.MongoDB(seriLogConnection, "Logs", minimumLevel),
                _ => loggerConfiguration
            };
            return loggerConfiguration.CreateLogger();
        }
    }
}



/*private static Serilog.ILogger CreateLogger(IConfiguration configuration)
{
    var serilogSeqUrl = configuration.GetSection("SerilogSeqUrl").Value;
    var seriLogConnection = configuration.GetConnectionString("SeriLogConnection");
    var minimumLevel = configuration.GetValue<LogEventLevel>("Serilog:MinimumLevel:Default");

    var serverUrl = serilogSeqUrl ?? seriLogConnection ?? throw new ArgumentNullException("Both SerilogSeqUrl and SeriLogConnection are null or empty.");

    var loggerConfiguration = new LoggerConfiguration()
        .MinimumLevel.Is(minimumLevel);

    if (!string.IsNullOrEmpty(serilogSeqUrl))
    {
        loggerConfiguration.WriteTo.Seq(serilogSeqUrl, minimumLevel);
    }

    if (!string.IsNullOrEmpty(seriLogConnection))
    {
        loggerConfiguration.WriteTo.MongoDB(seriLogConnection, "Logs", minimumLevel);
    }

    return loggerConfiguration.CreateLogger();
}*/


